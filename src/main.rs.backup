#![no_std]
#![no_main]

use wut::gx2::Renderable;
use wut::prelude::*;
use wut::*;

use wut::gx2::render::{
    attribute::Float4,
    buffer::{Buffer, ResourceFlags},
    shader::Shader,
    shader_group::ShaderGroup,
};
use wut::gx2::render_context::RenderContext;

static SHADER: Shader<1484> = Shader::from([
    0x47, 0x66, 0x78, 0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x42, 0x4c, 0x4b, 0x7b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xff, 0xff, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x10,
    0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xd0, 0x60, 0x01, 0x34, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xca, 0x70, 0x01, 0x54, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xca, 0x70, 0x01, 0x5c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x00, 0x61, 0x50, 0x6f, 0x73,
    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0xd0, 0x60, 0x01, 0x08, 0xca, 0x70, 0x01, 0x34,
    0xca, 0x70, 0x01, 0x44, 0x7d, 0x42, 0x4c, 0x4b, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x68, 0xd0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xd0, 0x60, 0x01, 0x54,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xd0, 0x60, 0x01, 0x68, 0x42, 0x4c, 0x4b, 0x7b,
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
    0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x09, 0x3c, 0x20, 0x01, 0x00, 0x88, 0x06, 0x00, 0x94, 0x00, 0xc0, 0x00, 0x00,
    0x88, 0x06, 0x00, 0x14, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x00, 0x0d, 0x00, 0x00, 0x42, 0x4c, 0x4b, 0x7b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x14, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x58, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x42, 0x4c, 0x4b,
    0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xd0, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xd0, 0x60, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd0, 0x60, 0x00, 0xe8, 0x42, 0x4c, 0x4b, 0x7b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x58, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xa0, 0x00, 0x00, 0x00, 0x00,
    0x88, 0x06, 0x20, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x90, 0x0c, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00,
    0x90, 0x0c, 0x00, 0x40, 0x00, 0xa0, 0x1f, 0x00, 0xfd, 0x04, 0x62, 0x6f, 0x00, 0x0c, 0x00, 0x80,
    0x90, 0x0c, 0x00, 0x60, 0x83, 0xf9, 0x22, 0x3e, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x0c, 0x00, 0x80,
    0x00, 0x08, 0x00, 0x40, 0xfe, 0xa8, 0x9f, 0x80, 0xfd, 0x00, 0x62, 0x2f, 0xdb, 0x0f, 0xc9, 0x40,
    0xdb, 0x0f, 0x49, 0xc0, 0xfe, 0xa4, 0x1f, 0x80, 0x80, 0x00, 0x00, 0x00, 0x83, 0xf9, 0x22, 0x3e,
    0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x80, 0x10, 0x37, 0x00, 0x00, 0x42, 0x4c, 0x4b, 0x7b,
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
]);

#[wut_main(Udp, Console)]
fn main() {
    let mut position_buffer = Buffer::from(
        &[
            Float4::from((1.0, -1.0, 0.0, 1.0)),
            Float4::from((0.0, 1.0, 0.0, 1.0)),
            Float4::from((-1.0, -1.0, 1.0, 1.0)),
        ],
        ResourceFlags::BindVertexBuffer
            | ResourceFlags::UsageCPURead
            | ResourceFlags::UsageCPUWrite
            | ResourceFlags::UsageGPURead,
    );

    let mut color_buffer = Buffer::from(
        &[
            Float4::from((1.0, 0.0, 0.0, 1.0)),
            Float4::from((0.0, 1.0, 0.0, 1.0)),
            Float4::from((0.0, 0.0, 1.0, 1.0)),
        ],
        ResourceFlags::BindVertexBuffer | ResourceFlags::UsageCPU | ResourceFlags::UsageGPURead,
    );

    let group = ShaderGroup::new(0, &SHADER).unwrap();
    let a_position = group.add_attribute::<Float4>("aPosition").unwrap();
    let a_color = group.add_attribute::<Float4>("aColour").unwrap();

    let context = RenderContext::new();

    while process::running() {
        {
            let mut b = color_buffer.lock().unwrap();
            let i = 0;
            b[i].x = 1.0;
            b[i].y = if b[i].y >= 1.0 { 0.0 } else { b[i].y + 0.01 };
            b[i].z = if b[i].z >= 1.0 { 0.0 } else { b[i].z + 0.01 };
            b[i].w = 1.0;

            let i = 1;
            b[i].x = if b[i].x >= 1.0 { 0.0 } else { b[i].x + 0.01 };
            b[i].y = 1.0;
            b[i].z = if b[i].z >= 1.0 { 0.0 } else { b[i].z + 0.01 };
            b[i].w = 1.0;

            let i = 2;
            b[i].x = if b[i].x >= 1.0 { 0.0 } else { b[i].x + 0.01 };
            b[i].y = if b[i].y >= 1.0 { 0.0 } else { b[i].y + 0.01 };
            b[i].z = 1.0;
            b[i].w = 1.0;
        }

        let context = context.ready().tv();

        gx2::screen::fill(&context, gx2::color::Color::white());
        a_position.set_buffer(&mut position_buffer);
        a_color.set_buffer(&mut color_buffer);
        // group.render_tv(&context);
        // unsafe {
        //     wut::bindings::GX2DrawEx(
        //         wut::bindings::GX2PrimitiveMode::GX2_PRIMITIVE_MODE_TRIANGLES,
        //         3,
        //         0,
        //         1,
        //     );
        // }

        // let context = context.drc();

        // gx2::screen::fill(&context, gx2::color::Color::white());
        // a_position.set_buffer(&mut position_buffer);
        // a_color.set_buffer(&mut color_buffer);
        // group.render_drc(&context);
        // unsafe {
        //     wut::bindings::GX2DrawEx(
        //         wut::bindings::GX2PrimitiveMode::GX2_PRIMITIVE_MODE_TRIANGLES,
        //         3,
        //         0,
        //         1,
        //     );
        // }

        // context.finish();
    }
}

#[allow(dead_code)]
fn channel_test() {
    let (tx, rx) = sync::mpsc::channel();

    let _ = thread::spawn(move || {
        tx.send(10).unwrap();
    })
    .unwrap();

    println!("{}", rx.recv().unwrap());
}

#[allow(dead_code)]
fn dynload_test() {
    use dynamic_loading::Module;

    let m = Module::new("coreinit.rpl").unwrap();

    let s = m.function::<unsafe fn() -> u64>("OSGetTitleID").unwrap();

    // println!("symbol: {:?}", unsafe { s.into_raw() });

    println!("{:#08x?}", unsafe { s() });
    // println!("{:#08x?}", unsafe { wut::bindings::OSGetTitleID() });

    // -----------------------

    let rpls = dynamic_loading::rpls_info(0, dynamic_loading::loaded_rpls());

    println!("{}", rpls.len());

    for rpl in &rpls {
        println!("{:?}", rpl);
    }
}

#[allow(dead_code)]
fn fs_test() {
    let p = "/vol/external01/wiiu/test.txt";
    // let p = "/vol/storage_mlc01/usr/test.txt"; // cemu
    let mut file = fs::OpenOptions::new()
        .read(true)
        .write(true)
        // .append(true)
        .create(true)
        .truncate(true)
        .open(p)
        .unwrap();
    println!("{:?}", file);

    println!("{}", file.metadata().unwrap().created().unwrap());

    println!("seek: {}", file.seek_position().unwrap());

    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer).unwrap();
    println!("{:?}", String::from_utf8_lossy(&buffer));

    println!("seek: {}", file.seek_position().unwrap());

    println!("{:?}", file.write_all(b"abc"));

    println!("seek: {}", file.seek(fs::SeekFrom::Start(0)).unwrap());

    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer).unwrap();
    println!("{:?}", String::from_utf8_lossy(&buffer));
}

#[allow(dead_code)]
fn net_test() {
    let listener = net::TcpListener::bind("0.0.0.0:7331").unwrap();

    println!("{:?}", listener);

    let (mut stream, _) = listener.accept().unwrap();

    println!("{:?}", stream);

    // let read = stream.read(&mut buffer).unwrap();
    // println!("{}", String::from_utf8_lossy(&buffer[..read]));

    let mut buffer = [0; 64];
    while let Ok(length) = stream.read(&mut buffer) {
        println!("{}", String::from_utf8_lossy(&buffer[..length]));
        let _ = stream.write(&buffer);
    }
}
